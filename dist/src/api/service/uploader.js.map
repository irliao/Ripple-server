{"version":3,"sources":["src/api/service/uploader.js"],"names":[],"mappings":"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","file":"src/api/service/uploader.js","sourcesContent":["var chalk = require('chalk');\nvar AWS = require('aws-sdk');\nvar path = require('path');\nvar nconf = require('nconf');\nvar LOG = require('../service/util').logger;\n\nvar uuid = require('node-uuid');\n    // For dev purposes only\n\nAWS.config.update(\n{\n    accessKeyId: nconf.get('aws:accessKeyId'),\n    secretAccessKey: nconf.get('aws:secretAccessKey'),\n    region: nconf.get('aws:region'),\n});\nvar s3_url = nconf.get('S3')['glimpse_test'];\n\nvar s3_test = function (fieldname, file, filename, enconding, next){\n    upload = new Uploader({\n        // credentials to access AWS\n        accessKey:  nconf.get('aws:accessKeyId'),\n        secretKey:  nconf.get('aws:secretAccessKey'),\n        bucket:     nconf.get('aws:test-bucket'),\n        objectName: filename,\n        objectParams: {\n            ACL: 'public-read'\n        },\n        stream:     file\n    });\n\n    upload.on('completed', function (err, res) {\n        LOG.log('upload completed');\n        next( err, res );\n    });\n\n    upload.on('failed', function (err) {\n        LOG.log('upload failed with error', err);\n    });\n\n}\n\nmodule.exports.multipart = function(req, res, next)\n{\n\n    req.busboy.on('file', function(fieldname, file, filename, encoding) {\n\n        filename = uuid.v4();\n        req.body.image_url=s3_url+filename;\n        LOG.info('on:file: '+req.body.image_url);\n        s3_test(fieldname, file, filename, encoding,\n            function( err, s3_response) {\n            });\n    });\n\n    req.busboy.on('field', function(fieldname, value, valTruncated, keyTruncated) {\n        LOG.info('on:field');\n        LOG.info(fieldname);\n        req.body[fieldname]=value;\n\n    });\n\n    req.busboy.on('finish', function() {\n        LOG.info('once:end');\n        next();\n    });\n\n    req.pipe(req.busboy);\n}\n\nmodule.exports.upload = function( fileData, fileInfo )\n{\n\n    var s3 = new AWS.S3();\n    var buf = new Buffer(fileData.replace(/^data:image\\/\\w+;base64,/, \"\"),'base64');\n\n    LOG.log( {\n    accessKeyId: nconf.get('aws:accessKeyId'),\n    secretAccessKey: nconf.get('aws:ecretAccessKey'),\n    region: nconf.get('aws:region'),\n} );\n    s3.putObject(\n        {\n            Bucket: 'glimpsing',\n            Key: fileInfo['key']+'.jpg',\n            Body: buf,\n            ACL: 'public-read',\n            ContentType:'multipart',\n        },\n        function( resp )\n        {\n            resp? LOG.log(chalk.red(resp)) : LOG.log( chalk.blue('Successfully uploaded.') );\n        });\n\n\n};\nvar Uploader = require('s3-streaming-upload').Uploader,\n    upload = null\n\n// s3Stream = require('s3-upload-stream')(new AWS.S3()),\n\n"]}